// this file was generated by the xRM Test Framework VS Extension

#region Imports

using System;
using System.Collections.Generic;
using LinkDev.Libraries.Common;
using Microsoft.Xrm.Sdk;

#endregion

namespace PluginProject1
{
	/// <summary>
	///     This plugin ... .<br />
	///     Version: 0.1.1
	/// </summary>
	public class PluginName1 : IPlugin
	{
		public void Execute(IServiceProvider serviceProvider)
		{
			////var context = (IPluginExecutionContext)serviceProvider.GetService(typeof(IPluginExecutionContext));
			//new PluginName1Logic<PluginName1, PluginName1, IEnumerable<Exception>>().Execute(this, serviceProvider, PluginUser.System);
			var t = new PluginName1Logic1<PluginName1, AccessViolationException, IEnumerable<Exception>>(serviceProvider);
			t.ExecuteLogic();
			t.log.LogExecutionEnd();
			//var t = new Test2<int>(serviceProvider);
			//	t.Test1(1, true);
			//	Test3.test(t.log);
			//	Test3.Test1(1);
			//t.log.LogExecutionEnd();
		}
	}

	[NoLog]
	internal class PluginName1Logic<H, D, N> : PluginLogic<PluginName1>
	{
		private CrmLog log1;
		////protected override bool IsContextValid()
		////{
		////	if (context.MessageName != "Create")
		////	{
		////		throw new InvalidPluginExecutionException(
		////			$"Step registered on wrong message: {context.MessageName},"
		////				+ $"expected: Create.");
		////	}

		////	if (!context.InputParameters.Contains("Target"))
		////	{
		////		throw new InvalidPluginExecutionException($"Context is missing input parameter: Target.");
		////	}

		////	if (context.PrimaryEntityName != "ldv_log")
		////	{
		////		throw new InvalidPluginExecutionException(
		////			$"Step registered on wrong entity: {context.PrimaryEntityName},"
		////				+ $"expected: ldv_log");
		////	}

		////	return true;
		////}

		[NoLog]
		protected override void ExecuteLogic()
		{
			log1 = log;
			// get the triggering record
			////var target = (Entity)context.InputParameters["Target"];
			////var typedTarget = target.ToEntity<Entity>();

			////LinkDev.Libraries.Common.CrmHelpers.LogAttributeValues(target.Attributes, target, log);
			log.Log("TEST!");

			Test(out var i);
			// plugin logic ...
		}

		private int Test(out int i)
		{
			return i = 1;
		}
	}

	[Log]
	internal class PluginName1Logic1<H, D, N> : PluginName1Logic2<PluginName1, D> where D : AccessViolationException
	{
		public PluginName1Logic1(IServiceProvider serviceProvider)
		{
			log = new CrmLog(serviceProvider);
			log.LogExecutionStart();
		}

		public void ExecuteLogic()
		{
			log.LogLine();
			Test1(4);
			Test2(true);
		}
	}

	[Log]
	internal class PluginName1Logic2<A, B> :
		PluginName1Logic3<Test3, AccessViolationException, IEnumerable<Exception>, B> where A : class where B : Exception
	{
		public int Test1(int i)
		{
			return i;
		}
	}

	[Log]
	internal class PluginName1Logic3<T, Y, Z, L> where T : class where Y : Exception where Z : IEnumerable<Exception>
	{
		public CrmLog log;

		public bool Test2(bool y)
		{
			return false;
		}
	}

	//abstract class Test<T>
	//{
	//	public CrmLog log;
	//	public Test(IServiceProvider serviceProvider)
	//	{
	//		log = new CrmLog(serviceProvider);
	//		log.LogExecutionStart();
	//	}

	//	protected abstract void Test1();
	//}

	//[Log]
	//class Test2<T> :Test<T>
	//{
	//	public Test2(IServiceProvider serviceProvider) : base(serviceProvider)
	//	{}

	//	protected override void Test1()
	//	{
	//		log.LogLine();
	//	}
	//}

	[NoLog]
	class Test3
	{
		private static CrmLog log;


		public static void test(CrmLog log)
		{
			Test3.log = log;
		}

		public static int Test1(int i)
		{
			i = 5;
			return i;
		}
	}
}
